---
export interface Props {
  /** 视频直链地址（mp4/webm/ogg 等 HTML5 视频） */
  src: string;
  /** 可选：无障碍标题 */
  title?: string;
}

const { src, title = 'Video' } = Astro.props;

// 引入 Plyr 的样式（Astro 支持在前言脚本里直接 import CSS）
import 'plyr/dist/plyr.css';
---

<!-- 用自定义元素包裹，确保每个实例各自初始化 -->
<astro-plyr data-src={src} data-title={title}>
  <video
    class="plyr"
    playsinline
    controls
    preload="metadata"
    aria-label={title}
  >
    <source src={src} />
  </video>
</astro-plyr>

<script>
  // 在浏览器侧初始化（Astro 会把这里当 ES modules 处理并打包）
  import Plyr from 'plyr';

  class AstroPlyr extends HTMLElement {
    private _player: Plyr | undefined;
    connectedCallback() {
      // 只在当前实例中查找，避免多实例冲突
      const video = this.querySelector('video');
      if (!video || video.dataset.plyrInitialized === 'true') return;

      // 极简控制条；可按需增删
      const controls = ['play', 'progress', 'current-time', 'mute', 'volume', 'fullscreen'];

      // 初始化 Plyr
      const player = new Plyr(video, {
        controls,
        // 开箱即用的轻量体验，无额外功能
        // 可按需添加例如 tooltips/speed/ratio 等配置
      });

      // 标记避免重复初始化
      video.dataset.plyrInitialized = 'true';

      // 如果需要：你也可以在这里挂到 this 上方便外部调试
      this._player = player;
    }
  }

  // 仅注册一次
  if (!customElements.get('astro-plyr')) {
    customElements.define('astro-plyr', AstroPlyr);
  }
</script>

<style>
  /* 让视频自适应容器宽度 */
  video {
    display: block;
    width: 100%;
    height: auto;
  }
</style>