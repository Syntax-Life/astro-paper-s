---
import { SITE } from "@/config";

// 定义组件属性接口
export interface Props {
  src: string;                          // 图片源路径
  alt: string;                          // 图片替代文本
  class?: string;                       // 自定义CSS类名
  style?: string;                       // 自定义内联样式
  tags?: false | 'long' | 'short';      // 标签显示模式：false不显示，long长条形，short标签形
  exif?: boolean;                       // 是否显示EXIF信息
}

// 解构组件属性，设置默认值
const { 
  src, 
  alt, 
  class: className, 
  style, 
  tags = SITE.imageConfig.tags.defaultStyle, 
  exif = SITE.imageConfig.exif.enabled 
} = Astro.props;

// 去除路径片段中的文件扩展名（如 .html）
const stripExtension = (name: string): string => {
  // 仅移除最后一个点之后的扩展名，保留名称中可能存在的其他点
  return name.replace(/\.[^\/.]+$/, '');
};

// 获取前端matter中的slug信息
const getFrontmatterSlug = (): string | undefined => {
  try {
    // 尝试从Astro props中获取frontmatter
    const frontmatter = (Astro as any).props?.frontmatter || (Astro as any).frontmatter;
    if (frontmatter?.slug) {
      return stripExtension(frontmatter.slug);
    }
    
    // 从URL路径中提取slug
    const pathname = Astro.url.pathname;
    const pathSegments = pathname.split('/').filter(Boolean);
    if (pathSegments.length > 0) {
      const lastSegment = pathSegments[pathSegments.length - 1];
      return stripExtension(lastSegment);
    }
    
    // 服务端环境下从请求URL中提取
    if (typeof window === 'undefined' && Astro.request) {
      const url = new URL(Astro.request.url);
      const segments = url.pathname.split('/').filter(Boolean);
      if (segments.length > 0) {
        return stripExtension(segments[segments.length - 1]);
      }
    }
    
    return undefined;
  } catch {
    return undefined;
  }
};

// 构建完整的图片路径
const buildImagePath = (imageSrc: string): string => {
  // 如果已经是完整URL，直接返回
  if (imageSrc.startsWith('http://') || imageSrc.startsWith('https://')) {
    return imageSrc;
  }
  
  // 如果包含CDN域名，说明已经是完整路径
  if (imageSrc.includes('cos.lhasa.icu')) {
    return imageSrc;
  }
  
  // 获取文章slug
  const finalSlug = getFrontmatterSlug();
  
  // 根据是否有slug构建路径
  if (finalSlug) {
    return `${SITE.imageConfig.imagesUrl}/${finalSlug}/${imageSrc}`;
  }
  
  return `${SITE.imageConfig.imagesUrl}/${imageSrc}`;
};

// 构建最终的图片路径
const finalSrc = buildImagePath(src);

// 生成EXIF数据的URL（将图片URL中的imagesUrl路径替换为exifUrl路径）
const generateExifUrl = (imageSrc: string): string => {
  return imageSrc.replace(SITE.imageConfig.imagesUrl, SITE.imageConfig.exifUrl);
};

// 生成EXIF URL
const exifUrl = exif ? generateExifUrl(finalSrc) : undefined;

const galleryName = getFrontmatterSlug() ?? 'images';
---

<!-- 图片容器：使用figure标签包装，支持响应式和居中显示 -->
<figure class={`my-6 mx-auto text-center max-w-full ${className || ''}`} style={style}>
  <div class="relative inline-block max-w-full md:max-w-3xl rounded-lg overflow-hidden lightbox">
    <!-- EXIF信息提示框：仅在启用EXIF时显示 -->
    {exif && (
      <div class="absolute top-0 left-0 right-0 opacity-0 invisible -translate-y-full transition-all duration-150 ease-out z-50 pointer-events-none exif-tooltip" data-exif-tooltip>
        <div class="px-2 py-0.5 text-[10px] font-medium leading-tight text-white bg-black/70 text-center rounded-t-lg exif-content whitespace-nowrap overflow-hidden text-ellipsis max-w-full">
          <div class="opacity-70 italic exif-loading">Loading EXIF data...</div>
        </div>
      </div>
    )}
    
    <a 
      href={finalSrc}
      class="glightbox"
      data-gallery={galleryName}
      {...(alt && alt.trim() ? {
        'data-description': alt,
        'data-desc-position': 'bottom',
        'data-desc-merged': '0'
      } : {})}
      data-type="image"
       >
      <img 
      src={finalSrc} 
      alt={alt}
      title={alt}
      loading={SITE.imageConfig.loading.lazy ? "lazy" : "eager"}
      class="w-full h-auto rounded-lg shadow-lg transition-all duration-300 ease-in-out block object-cover cursor-pointer not-prose img-main"
      data-exif-url={exifUrl ? exifUrl + "?exif" : undefined}
      data-show-exif={exif} />
    </a>
    
    <!-- 图片标签：根据tags属性显示不同样式的标签 -->
    {tags && alt && alt.trim() && (
    <figcaption class={`absolute m-0 p-0 max-w-full img-tags ${tags === 'long' ? 'tags-bar bottom-0 left-0 right-0' : 'tags-tag bottom-2 left-2 max-w-[calc(100%-1rem)]'}`}>
      <span class={`text-white font-medium leading-relaxed shadow-text-lg whitespace-nowrap overflow-hidden text-ellipsis max-w-full tags-text ${tags === 'long' ? 'block px-2.5 py-0.5 text-xs bg-black/80 text-left' : 'inline-block px-3 py-2 text-sm font-semibold rounded-md'}`}>{alt}</span>
      </figcaption>
    )}
  </div>
</figure>
<script>
  import '@/utils/images';
  import { initLightbox } from '@/utils/lightbox';
  initLightbox();
</script>

<style>
  @reference "tailwindcss";
  
  /* EXIF提示框显示状态 */
  .exif-tooltip.show {
    @apply opacity-100 visible translate-y-0 pointer-events-auto;
  }

  /* EXIF文本样式继承 */
  .exif-text,
  .exif-loading {
    color: inherit;
    font: inherit;
    text-shadow: inherit;
  }

  /* 文本阴影工具类 */
  .shadow-text-lg {
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
  }
  
  /* 移动端响应式优化 */
  @media (max-width: 768px) {
    .img-tags .tags-text {
      @apply text-xs;
    }
    
    .tags-tag .tags-text {
      @apply text-xs px-2.5 py-0.5;
    }
    
    .tags-tag {
      @apply bottom-1.5 left-1.5;
    }
  }
  
  /* 小屏幕设备优化 */
  @media (max-width: 480px) {
    .img-tags .tags-text {
      @apply text-[0.6rem];
    }
    
    .tags-tag .tags-text {
      @apply text-[0.6rem] px-2 py-1;
    }
    
    .tags-tag {
      @apply bottom-1 left-1;
    }
  }
  
  /* Prose样式兼容性 */
  :global(.prose) .img-container {
    margin: 1.5rem auto !important;
  }
  
  :global(.prose) .img-container .img-main {
    margin: 0 !important;
  }
</style>