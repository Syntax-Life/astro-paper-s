---
import { _t } from "@/i18n/lang";
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
// import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import IconChevronUp from "@/assets/icons/IconChevronUp.svg";
import IconCategory from "@/assets/icons/IconCategory.svg";
import IconTag from "@/assets/icons/IconTag.svg";
import { SITE } from "@/config";
import getDescription from "@/utils/getDescription";
import DisqusComment from "@/components/DisqusComment.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { slug } = Astro.params;
const { post, posts } = Astro.props;

const {
  title,
  subtitle,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  date,
  updated,
  timezone,
  tags,
  categories,
  hideEditPost,
  toc,
  math,
  comments,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description: description || getDescription(post.body || ""),
  pubDatetime: date,
  modDatetime: updated,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
  toc,
  math,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id }) => ({
  slug: id,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-2xl px-4 pb-12 xl:max-w-3xl",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <ul class="my-1 flex flex-col flex-wrap space-y-2 md:flex-row md:space-y-0">
      <!-- categories -->
      {
        categories.length > 0 && (
          <li class="mr-4 flex items-center space-x-0.5 opacity-80">
            <IconCategory class="mt-0.5 h-4 w-4" />
            {categories.map((cat: string) => (
              <ul>
                <li>
                  <a
                    href={`/categories/${slugifyStr(cat)}`}
                    class="hover:text-skin-accent text-sm"
                  >
                    {cat}
                  </a>
                </li>
              </ul>
            ))}
          </li>
        )
      }
      <!-- Tags -->
      {
        tags.length > 0 && (
          <li class="flex items-center space-x-0.5">
            <IconTag class="mt-0.5 h-4 w-4" />
            <ul>
              {tags.map((tag: string) => (
                <Tag tag={slugifyStr(tag)} tagName={tag} />
              ))}
            </ul>
          </li>
        )
      }
    </ul>

    <!-- Title -->
    <h1
      transition:name={slugifyStr(title)}
      class="mt-8 mb-4 inline-block text-3xl font-bold text-accent sm:text-4xl"
    >
      {title}
    </h1>
    {subtitle && <h2 class="text-xl opacity-70">{subtitle}</h2>}

    <div class="flex items-center gap-4">
      <Datetime
        pubDatetime={date}
        modDatetime={updated}
        {timezone}
        size="lg"
        class="my-2 ml-auto"
      />
      <EditPost class="max-sm:hidden" {hideEditPost} {post} />
    </div>

    <article
      id="article"
      class="js-toc-content mx-auto prose mt-8 max-w-2xl xl:max-w-3xl"
    >
      <Content />
    </article>

    <!-- <hr class="my-8" /> -->

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <!-- <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul> -->

    <!-- <div
      class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks />

      <button
        id="back-to-top"
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div> -->

    <hr class="my-6" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={`/posts/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none" />
            <div>
              {/* <span>Previous Post</span> */}
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/posts/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              {/* <span>Next Post</span> */}
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none" />
          </a>
        )
      }
    </div>

    <!-- Comments -->
    {
      comments && (
        <div class="comments my-8">
          {/* <p class="mb-6 text-center text-sm">Additional info</p> */}
          <DisqusComment slug={slug} title={title} />
        </div>
        // If you want to use Giscus instead, please refer to
        // https://astro-paper.pages.dev/posts/how-to-integrate-giscus-comments/
      )
    }
  </main>

  <!-- Sidebar -->
  <aside
    class="sidebar fixed top-32 right-10 m-2 hidden max-h-[clac(100vh-12rem)] w-32 overflow-y-auto text-sm lg:block xl:right-24 2xl:w-64"
  >
    {
      toc && (
        <>
          <div id="toc-container" class="js-toc" />
          <hr class="my-4 opacity-80" aria-hidden={true} />
        </>
      )
    }
    <div
      class="flex flex-col items-start space-y-0 truncate overflow-hidden whitespace-nowrap opacity-80"
    >
      <button
        id="back-to-top"
        aria-label={_t.common.backToTop}
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronUp class="inline-block" />
        <span class="text-sm">{_t.common.backToTop}</span>
      </button>
    </div>
  </aside>

  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /* Tocbot */
  (function () {
    // If the toc-container is not present, do nothing
    if (!document.getElementById("toc-container")) {
      return;
    }

    function initTocbot() {
      window.tocbot.init({
        tocSelector: ".js-toc",
        contentSelector: ".js-toc-content",
        headingSelector: "h2, h3, h4",
        hasInnerContainers: true,
      });
    }

    if (window.tocbot) {
      // Tocbot is already loaded
      initTocbot();
    } else {
      // Load Tocbot from CDN
      const script = document.createElement("script");
      script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.34.0/tocbot.min.js";
      script.integrity =
        "sha512-EMZRx2Hno6csUwgZoOMjyKDp1UdNRrCQH0R97VEPYynqgSUrRItJn73HnRUwqujCat2/Zg731UEw+7xDXAL1ag==";
      script.crossOrigin = "anonymous";
      script.referrerPolicy = "no-referrer";

      // Initialize Tocbot after the script is loaded
      script.onload = () => {
        initTocbot();
      };

      document.body.appendChild(script);
    }
  })();

  /* Back to top button */
  (function () {
    // Scrolls the document to the top when the "Back to Top" button is clicked
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  })();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
